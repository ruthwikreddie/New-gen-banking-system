package com.github.derickfelix.bankapplication.views.customers;

import com.github.derickfelix.bankapplication.models.Customer;
import com.github.derickfelix.bankapplication.repositories.CustomerRepository;
import com.github.derickfelix.bankapplication.repositories.OperationRepository;
import com.github.derickfelix.bankapplication.repositories.impl.RepositoryFactory;
import com.github.derickfelix.bankapplication.repositories.WithdrawRepository;

import com.github.derickfelix.bankapplication.repositories.impl.CustomerRepositoryImpl;
import com.github.derickfelix.bankapplication.repositories.impl.OperationRepositoryImpl;

import com.github.derickfelix.bankapplication.repositories.impl.WithdrawRepositoryImpl;
import com.github.derickfelix.bankapplication.securities.AuthSecurity;
import com.github.derickfelix.bankapplication.utilities.MessageUtility;
import com.github.derickfelix.bankapplication.utilities.ViewUtility;
import java.util.Optional;

public class NewWithdrawFrame extends javax.swing.JInternalFrame {

    private final CustomerMainForm customerMainForm;
    private final CustomerRepository customerRepository;
    private final OperationRepository operationRepository;
    private final WithdrawRepository withdrawRepository;
    private final String accountNumber;
    
    public NewWithdrawFrame(CustomerMainForm customerMainForm)
    {
        this.customerMainForm = customerMainForm;
        this.customerRepository = (CustomerRepository) new RepositoryFactory().getInstance("customer");
        this.operationRepository = OperationRepositoryImpl.getOPInstance();
        this.withdrawRepository = new WithdrawRepositoryImpl();
        this.accountNumber = AuthSecurity.getCustomer().getAccountNumber();

        initComponents();
        customSettings();
    }
    
    private void customSettings()
    {
        defineCurrentBalance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btnWithdraw = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        paneInputs = new javax.swing.JPanel();
        lblCurrentBalance = new javax.swing.JLabel();
        txtCurrentBalance = new javax.swing.JTextField();
        txtWithdrawAmount = new javax.swing.JTextField();
        lblWithdrawAmount = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblPassword = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Zwei Bank Application - Withdraw Operation");

        btnWithdraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnWithdraw.setText("Withdraw");
        btnWithdraw.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnWithdrawActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCloseActionPerformed(evt);
            }
        });

        paneInputs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));

        lblCurrentBalance.setText("Your Balance");

        txtCurrentBalance.setEnabled(false);

        lblWithdrawAmount.setText("Withdraw Amount");

        lblPassword.setText("Password");

        javax.swing.GroupLayout paneInputsLayout = new javax.swing.GroupLayout(paneInputs);
        paneInputs.setLayout(paneInputsLayout);
        paneInputsLayout.setHorizontalGroup(
            paneInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtWithdrawAmount)
                    .addComponent(txtCurrentBalance)
                    .addComponent(lblWithdrawAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(lblCurrentBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(txtPassword)
                    .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        paneInputsLayout.setVerticalGroup(
            paneInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneInputsLayout.createSequentialGroup()
                .addGroup(paneInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneInputsLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(txtCurrentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneInputsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCurrentBalance)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblWithdrawAmount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtWithdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnWithdraw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose))
                    .addComponent(paneInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnWithdraw))
                .addGap(12, 12, 12))
        );

        setBounds(300, 100, 469, 302);
    }// </editor-fold>//GEN-END:initComponents

    private void btnWithdrawActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnWithdrawActionPerformed
    {//GEN-HEADEREND:event_btnWithdrawActionPerformed
        withdraw();
    }//GEN-LAST:event_btnWithdrawActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCloseActionPerformed
    {//GEN-HEADEREND:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void clearForm()
    {
        txtWithdrawAmount.setText("");
        txtPassword.setText("");
        defineCurrentBalance();
    }
    
    private void defineCurrentBalance()
    {
        setCursor(ViewUtility.WAIT_CURSOR);
        txtCurrentBalance.setText(operationRepository.currentBalance(accountNumber).orElse(0.0).toString());
        setCursor(ViewUtility.DEFAULT_CURSOR);
    }
    
    private void withdraw()
    {
        try {
            double withdrawAmount = Double.parseDouble(txtWithdrawAmount.getText());
            String password = new String(txtPassword.getPassword());

            if (withdrawAmount <= 0 || password.isEmpty()) {
                MessageUtility.warning(customerMainForm, "There are invalid fields");
                return;
            }
            
            double futureBalance = Double.parseDouble(txtCurrentBalance.getText()) - withdrawAmount;
            
            if (futureBalance < 0) {
                MessageUtility.warning(customerMainForm, "Could not perform this operation, not enough money!");
                return;
            }
            
            Optional<Customer> optional = customerRepository.findByAccountNumberAndPassword(accountNumber, password);
            
            if (!optional.isPresent()) {
                MessageUtility.warning(customerMainForm, "Could not peform this operation, invalid password!");
                return;
            }
            
            withdrawRepository.withdraw(accountNumber, withdrawAmount);
            
            MessageUtility.info(customerMainForm, "Money withdrawn successfully!");
            clearForm();
        } catch (NumberFormatException e) {
            MessageUtility.error(customerMainForm, "Invalid withdraw value", e);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnWithdraw;
    private javax.swing.JLabel lblCurrentBalance;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblWithdrawAmount;
    private javax.swing.JPanel paneInputs;
    private javax.swing.JTextField txtCurrentBalance;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtWithdrawAmount;
    // End of variables declaration//GEN-END:variables
}
